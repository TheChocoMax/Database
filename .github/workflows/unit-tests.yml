name: Run Unit Tests

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

env:
  PG_USER: postgres
  PG_PASSWORD: postgres
  PG_DATABASE: chocomax
  PG_HOST: localhost

jobs:
  pgtap:
    name: Run PgTAP Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17.5-alpine3.22
        env:
          POSTGRES_PASSWORD: ${{ env.PG_PASSWORD }}
          POSTGRES_DB: ${{ env.PG_DATABASE }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U $PG_USER"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pgTAP and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            make gcc cpanminus \
            postgresql-client \
            libdbd-pg-perl
          sudo cpanm TAP::Parser::SourceHandler::pgTAP

          # Clone PgTAP
          git clone --depth 1 --branch v1.3.3 https://github.com/theory/pgtap.git

          # Install pgTAP into the database
          cd pgtap
          make
          PGPASSWORD=${{ env.PG_PASSWORD }} psql -h ${{ env.PG_HOST }} -U ${{ env.PG_USER }} -d ${{ env.PG_DATABASE }} -f sql/pgtap.sql

      - name: Load SQL files
        run: |
          mkdir flattened-sql
          find database -type f -name "*.sql" ! -name "*.session.sql" ! -name "*.test.sql" | while read -r file; do
            clean_path=$(echo "$file" | sed 's|^\./||')
            new_name=$(echo "$clean_path" | sed 's|/|_|g')
            cp "$file" "flattened-sql/$new_name"
            echo "✅ Copied: $file → flattened-sql/$new_name"
          done

          find flattened-sql -maxdepth 1 -name "*.sql" | while read -r file; do
            echo "➡️ Running $file..."
            PGPASSWORD=${{ env.PG_PASSWORD }} psql -h ${{ env.PG_HOST }} -U ${{ env.PG_USER }} -d ${{ env.PG_DATABASE }} -f "$file"
          done

          rm -rf flattened-sql

      - name: Run tests
        run: |
          PGPASSWORD=${{ env.PG_PASSWORD }} pg_prove -h ${{ env.PG_HOST }} -U ${{ env.PG_USER }} -d ${{ env.PG_DATABASE }} database/tests/*.test.sql
